# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14BjQu7pxrFw-ZMgFR7CFeRNZ5mlN_qiW
"""

import csv
import numpy as np

def CalculateClassMean(X, class_label):
        return np.mean(X[X[:, 2] == class_label][:, :2], axis=0)

def ComputeMeanDiff(X):
    class0_mean = CalculateClassMean(X, 0)
    class1_mean = CalculateClassMean(X, 1)

    return class0_mean - class1_mean


def ComputeSW(X):
    class0_X = X[X[:, 2] == 0][:, :2]
    class1_X = X[X[:, 2] == 1][:, :2]
    SW = np.zeros((2, 2))
    for i in range(class0_X.shape[0]):
        SW += np.outer(class0_X[i] - np.mean(class0_X, axis=0), class0_X[i] - np.mean(class0_X, axis=0))
    for i in range(class1_X.shape[0]):
        SW += np.outer(class1_X[i] - np.mean(class1_X, axis=0), class1_X[i] - np.mean(class1_X, axis=0))
    return SW

def ComputeSB(X):
    class0_mean = CalculateClassMean(X, 0)
    class1_mean = CalculateClassMean(X, 1)
    SB = np.outer(class0_mean - class1_mean, class0_mean - class1_mean)
    return SB

def GetLDAProjectionVector(X):
    SW_inv = np.linalg.inv(ComputeSW(X))
    SB = ComputeSB(X)
    eigenvalues, eigenvectors = np.linalg.eig(np.dot(SW_inv, SB))
    max_eigenvalue_idx = np.argmax(eigenvalues)
    return eigenvectors[:, max_eigenvalue_idx]

def project(x, y, w):
    return np.dot([x, y], w)

X = np.genfromtxt('data.csv', delimiter=',')
print(X)
print(X.shape)

opt = int(input("Input your option (1-5): "))

if opt == 1:
    meanDiff = ComputeMeanDiff(X)
    print(meanDiff)
elif opt == 2:
    SW = ComputeSW(X)
    print(SW)
elif opt == 3:
    SB = ComputeSB(X)
    print(SB)
elif opt == 4:
    w = GetLDAProjectionVector(X)
    print(w)
elif opt == 5:
    x = float(input("Input x dimension of a 2-dimensional point: "))
    y = float(input("Input y dimension of a 2-dimensional point: "))
    w = GetLDAProjectionVector(X)
    print(project(x, y, w))